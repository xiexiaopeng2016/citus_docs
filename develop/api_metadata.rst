.. _metadata_tables:

Citus表和视图
======================

协调者元数据
--------------------

Citus根据分布列将每个分布式表划分为多个逻辑分片。
然后, 协调器维护元数据表，以跟踪统计信息和关于这些分片的健康状况和位置的信息。
在本节中，我们将描述每个元数据表及其架构。登录到协调器节点后，您可以使用SQL查看和查询这些表。

.. _partition_table:

分区表
~~~~~~~~~~~~~~~~~

pg_dist_partition表存储有关数据库中哪些表的分布的元数据。对于每个分布式表，它还存储有关分布方法的信息和有关分布列的详细信息。

+----------------+----------------------+---------------------------------------------------------------------------+
|      Name      |         Type         |       Description                                                         |
+================+======================+===========================================================================+
| logicalrelid   |         regclass     | | 此行对应的分布式表。该值引用pg_class系统目录表中的relfilenode列。       |
|                |                      | |                                                                         |
+----------------+----------------------+---------------------------------------------------------------------------+
|  partmethod    |         char         | | 用于分区/分发的方法。这个的价值对应不同分配方法的列是                   |
|                |                      | | append: 'a'                                                             |
|                |                      | | hash: 'h'                                                               |
|                |                      | | reference table: 'n'                                                    |
+----------------+----------------------+---------------------------------------------------------------------------+
|   partkey      |         text         | | 有关分发列的详细信息，包括列数量，类型和其他相关信息。                  |
+----------------+----------------------+---------------------------------------------------------------------------+
|   colocationid |         integer      | | 此表所属的共址组。同一组中的表允许共存的连接和分布式汇总等优化。        |
|                |                      | | 该值引用了pg_dist_colocation表中的colocationid列。                      |
+----------------+----------------------+---------------------------------------------------------------------------+
|   repmodel     |         char         | | 用于数据复制的方法。此列的值对应不同的复制方法有：                      |
|                |                      | | * 基于声明的复制: 'c'                                                   |
|                |                      | | * postgresql流复制:  's'                                                |
|                |                      | | * 两阶段提交（参考表）: 't'                                             |
+----------------+----------------------+---------------------------------------------------------------------------+

::

    SELECT * from pg_dist_partition;
     logicalrelid  | partmethod |                                                        partkey                                                         | colocationid | repmodel 
    ---------------+------------+------------------------------------------------------------------------------------------------------------------------+--------------+----------
     github_events | h          | {VAR :varno 1 :varattno 4 :vartype 20 :vartypmod -1 :varcollid 0 :varlevelsup 0 :varnoold 1 :varoattno 4 :location -1} |            2 | c
     (1 row)

.. _pg_dist_shard:

分片表
~~~~~~~~~~~~~~~~~

pg_dist_shard表存储有关表的各个分片的元数据。这包括有关该分片所属的分布式表的信息以及该分片的分步列的统计信息。对于追加分布式表，这些统计信息对应于分步列的最小值/最大值。在散列分布式表的情况下，它们是分配给该分片的散列令牌范围。这些统计信息用于在SELECT查询期间修剪不相关的分片。

+----------------+----------------------+---------------------------------------------------------------------------+
|      Name      |         Type         |       Description                                                         |
+================+======================+===========================================================================+
| logicalrelid   |         regclass     | | 此分片所属的分布式表。该值引用了pg_class系统目录表中的relfilenode列。   |
+----------------+----------------------+---------------------------------------------------------------------------+
|    shardid     |         bigint       | | 分配给此分片的全局唯一标识符。                                          |
+----------------+----------------------+---------------------------------------------------------------------------+
| shardstorage   |            char      | | 用于此分片的存储类型。不同的存储类型是在下表中讨论。                    |
+----------------+----------------------+---------------------------------------------------------------------------+
| shardminvalue  |            text      | | 对于附加分布式表，分布列的最小值在这个分片中（包括）                    |
|                |                      | | 对于散列分布式表，分配给它的最小散列令牌值分片（包括）。                |
+----------------+----------------------+---------------------------------------------------------------------------+
| shardmaxvalue  |            text      | | 对于附加分布式表，分发列的最大值在这个分片（包括）中。                  |
|                |                      | | 对于散列分布式表，分配给它的最大散列令牌值分片（包括）。                |
+----------------+----------------------+---------------------------------------------------------------------------+

::

    SELECT * from pg_dist_shard;
     logicalrelid  | shardid | shardstorage | shardminvalue | shardmaxvalue 
    ---------------+---------+--------------+---------------+---------------
     github_events |  102026 | t            | 268435456     | 402653183
     github_events |  102027 | t            | 402653184     | 536870911
     github_events |  102028 | t            | 536870912     | 671088639
     github_events |  102029 | t            | 671088640     | 805306367
     (4 rows)


分片存储类型
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

pg_dist_shard中的shardstorage列指示用于分片的存储类型。下面简要概述了不同的分片存储类型及其表示形式。

+----------------+----------------------+---------------------------------------------------------------------------+
|  存储类型      |  Shardstorage值      |  描述                                                                     |
+================+======================+===========================================================================+
|   TABLE        |           't'        | | 表示分片存储属于常规的数据布式表。                                      |
+----------------+----------------------+---------------------------------------------------------------------------+
|  COLUMNAR      |            'c'       | | 表示分片存储列数据。(用于分布式cstore_fdw表)                            |
+----------------+----------------------+---------------------------------------------------------------------------+
|   FOREIGN      |            'f'       | | 表示分片存储外部数据。(用于分布式file_fdw表)                            |
+----------------+----------------------+---------------------------------------------------------------------------+


.. _placements:

分片放置表
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

pg_dist_placement表跟踪工作节点上的分片复制副本的位置。分配给特定节点的分片的每个副本称为分片放置。此表存储有关每个分片放置的运行状况和位置的信息。

+----------------+----------------------+---------------------------------------------------------------------------+
|      Name      |         Type         |       Description                                                         |
+================+======================+===========================================================================+
| shardid        |       bigint         | | 与此位置关联的分片标识符。该值引用pg_dist_shard目录表中的shardid列。    |
+----------------+----------------------+---------------------------------------------------------------------------+
| shardstate     |         int          | | 描述此位置的状态。不同的分片状态是在下面的部分讨论。                    |
+----------------+----------------------+---------------------------------------------------------------------------+
| shardlength    |       bigint         | | F对于附加分布式表，分片放置的大小工作节点以字节为单位对于散列           |
|                |                      | | 分布式表，为零。                                                        |
+----------------+----------------------+---------------------------------------------------------------------------+
| placementid    |       bigint         | | 每个展示位置的唯一自动生成标识符。                                      |
+----------------+----------------------+---------------------------------------------------------------------------+
| groupid        |         int          | | 用于表示一个主服务器组和零个或多个的标识符辅助服务器，使用流复制模型时。|
+----------------+----------------------+---------------------------------------------------------------------------+

::

  SELECT * from pg_dist_placement;
    shardid | shardstate | shardlength | placementid | groupid
   ---------+------------+-------------+-------------+---------
     102008 |          1 |           0 |           1 |       1
     102008 |          1 |           0 |           2 |       2
     102009 |          1 |           0 |           3 |       2
     102009 |          1 |           0 |           4 |       3
     102010 |          1 |           0 |           5 |       3
     102010 |          1 |           0 |           6 |       4
     102011 |          1 |           0 |           7 |       4

.. 注意::

  截至Citus 7.0，类似表:code:`pg_dist_shard_placement`已被弃用。它包括每个位置的节点名称和端口：

  ::

    SELECT * from pg_dist_shard_placement;
      shardid | shardstate | shardlength | nodename  | nodeport | placementid 
     ---------+------------+-------------+-----------+----------+-------------
       102008 |          1 |           0 | localhost |    12345 |           1
       102008 |          1 |           0 | localhost |    12346 |           2
       102009 |          1 |           0 | localhost |    12346 |           3
       102009 |          1 |           0 | localhost |    12347 |           4
       102010 |          1 |           0 | localhost |    12347 |           5
       102010 |          1 |           0 | localhost |    12345 |           6
       102011 |          1 |           0 | localhost |    12345 |           7

  现在可以通过在groupid 上将pg_dist_placement与:ref:`pg_dist_node <pg_dist_node>`连接来获取该信息。为了兼容性，Citus仍然提供pg_dist_shard_placement作为视图。但是，我们建议尽可能使用新的，更规范化的表。

分片放置状态
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

Citus根据一个per-placement管理分片的健康状况，如果将位置留在服务中会使集群处于不一致的状态，则自动将位置标记为不可用。pg_dist_placement表中的shardstate列用于存储分片展示位置的状态。下面是不同分片放置状态及其表示的简要概述。


+----------------+----------------------+---------------------------------------------------------------------------+
|  State name    |  Shardstate value    |       Description                                                         |
+================+======================+===========================================================================+
|   FINALIZED    |           1          | | 这是创建状态的新分片。分片放置在这种状态下被认为是最新的                |
|                |                      | | 并用于查询计划和执行。  	                                             |
+----------------+----------------------+---------------------------------------------------------------------------+
| INACTIVE       |            3         | | 处于此状态的分片展示位置被视为非活动状态,                               |
|                |                      | | 理所当然的与同一分片的其他副本不同步。                                  |
|                |                      | | 这种情况可能出现当此展示位置的追加，                                    |
|                |                      | | 修改（INSERT，UPDATE或DELETE）或DDL操作失败时。                         |
|                |                      | | 在规划和执行期间，查询规划器将忽略此状态的展示位置。                    |
|                |                      | | 用户可以使用幕后活动将这些分片数据与完成的副本同步。                    |
+----------------+----------------------+---------------------------------------------------------------------------+
|   TO_DELETE    |            4         | | 如果Citus为了响应一个master_apply_delete_command调用,                   |
|                |                      | | 而尝试删除分片放置并失败，                                              |
|                |                      | | 放置位置会调整到了这个状态。                                            |
|                |                      | | 然后，用户可以在后续的后台活动中删除这些分片。                          |
+----------------+----------------------+---------------------------------------------------------------------------+


.. _pg_dist_node:

工作节点表
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

pg_dist_node表包含有关集群中工作节点的信息。

+----------------+----------------------+---------------------------------------------------------------------------+
|      Name      |         Type         |       Description                                                         |
+================+======================+===========================================================================+
| nodeid         |         int          | | 自动生成的单个节点的标识符。                                            |
+----------------+----------------------+---------------------------------------------------------------------------+
| groupid        |         int          | | 标识符用于表示一个主服务器和零个或多个的辅助服务器组，使用流复制模型时。|
|                |                      | | 通过默认它与nodeid相同。                                                |
+----------------+----------------------+---------------------------------------------------------------------------+
| nodename       |         text         | | PostgreSQL工作节点的主机名或IP地址。                                    |
+----------------+----------------------+---------------------------------------------------------------------------+
| nodeport       |         int          | | PostgreSQL工作节点正在侦听的端口号。                                    |
+----------------+----------------------+---------------------------------------------------------------------------+
| noderack       |        text          | | (可选)工作节点的机架放置信息。                                          |
+----------------+----------------------+---------------------------------------------------------------------------+
| hasmetadata    |        boolean       | | 保留供内部使用。                                                        |
+----------------+----------------------+---------------------------------------------------------------------------+
| isactive       |        boolean       | | 节点是否处于活动状态，接受分片放置。                                    |
+----------------+----------------------+---------------------------------------------------------------------------+
| noderole       |        text          | | 节点是主节点还是辅节点                                                  |
+----------------+----------------------+---------------------------------------------------------------------------+
| nodecluster    |        text          | | 包含此节点的集群的名称                                                  |
+----------------+----------------------+---------------------------------------------------------------------------+

::

    SELECT * from pg_dist_node;
     nodeid | groupid | nodename  | nodeport | noderack | hasmetadata | isactive | noderole | nodecluster
    --------+---------+-----------+----------+----------+-------------+----------+----------+ -------------
          1 |       1 | localhost |    12345 | default  | f           | t        | primary  | default
          2 |       2 | localhost |    12346 | default  | f           | t        | primary  | default
          3 |       3 | localhost |    12347 | default  | f           | t        | primary  | default
    (3 rows)

.. _colocation_group_table:

共址组表
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

pg_dist_colocation表包含有关哪些表的分片应放在一起或:ref:`co-located <colocation>`的信息。当两个表位于同一个共址组时，Citus会确保具有相同分区值的分片将放置在同一个工作节点上。这使得连接优化，某些分布式汇总和外键支持成为可能。当分片计数，复制因子和分区列类型在两个表之间都匹配时，推断出分片共址; 但是，如果需要，可以在创建分布式表时指定自定义共址组。

+------------------------+----------------------+-------------------------------------------------------------------+
|      Name              |         Type         |       Description                                                 |
+========================+======================+===================================================================+
| colocationid           |         int          | | 此行对应的协同定位组的唯一标识符。                              |
+------------------------+----------------------+-------------------------------------------------------------------+
| shardcount             |         int          | | 此共址组中所有表的分片计数                                      |
+------------------------+----------------------+-------------------------------------------------------------------+
| replicationfactor      |         int          | | 此协同定位组中所有表的复制因子。                                |
+------------------------+----------------------+-------------------------------------------------------------------+
| distributioncolumntype |         oid          | | 此处所有表的分发列类型共址组。                                  |
+------------------------+----------------------+-------------------------------------------------------------------+

::

    SELECT * from pg_dist_colocation;
      colocationid | shardcount | replicationfactor | distributioncolumntype 
     --------------+------------+-------------------+------------------------
                 2 |         32 |                 2 |                     20
      (1 row)

.. _citus_stat_statements:

查询统计表
~~~~~~~~~~~~~~~~~~~~~~

.. 注意::
  citus_stat_statements视图是Citus企业版的一部分。请`联系我们 <https://www.citusdata.com/about/contact_us>`_以获取此功能。

Citus提供``citus_stat_statements``有关如何执行查询以及为谁执行查询的统计信息。它与PostgreSQL中的`pg_stat_statements <https://www.postgresql.org/docs/current/static/pgstatstatements.html>`_视图类似（并且可以与之结合），该视图跟踪有关查询速度的统计信息。

此视图可以跟踪多租户应用程序中的原始租户的查询，这有助于决定何时进行:ref:`tenant_isolation`。

+----------------+--------+---------------------------------------------------------+
| Name           | Type   | Description                                             |
+================+========+=========================================================+
| queryid        | bigint | 标识符(适用于pg_stat_statements连接)                    |
+----------------+--------+---------------------------------------------------------+
| userid         | oid    | 运行查询的用户                                          |
+----------------+--------+---------------------------------------------------------+
| dbid           | oid    | 协调者的数据库实例                                      |
+----------------+--------+---------------------------------------------------------+
| query          | text   | 匿名查询字符串                                          |
+----------------+--------+---------------------------------------------------------+
| executor       | text   | Citus :ref:`执行者 <distributed_query_executor>`使用:   |
|                |        | real-time, task-tracker, router, or insert-select       |
+----------------+--------+---------------------------------------------------------+
| partition_key  | text   | 路由器执行的查询中的分发列的值，否则为NULL              |
+----------------+--------+---------------------------------------------------------+
| calls          | bigint | 查询运行的次数                                          |
+----------------+--------+---------------------------------------------------------+

.. code-block:: sql

  -- create and populate distributed table
  create table foo ( id int );
  select create_distributed_table('foo', 'id');
  insert into foo select generate_series(1,100);

  -- enable stats
  -- pg_stat_statements must be in shared_preload libraries
  create extension pg_stat_statements;

  select count(*) from foo;
  select * from foo where id = 42;

  select * from citus_stat_statements;

结果:

::

  ┌────────────┬────────┬───────┬───────────────────────────────────────────────┬───────────────┬───────────────┬───────┐
  │  queryid   │ userid │ dbid  │                     query                     │   executor    │ partition_key │ calls │
  ├────────────┼────────┼───────┼───────────────────────────────────────────────┼───────────────┼───────────────┼───────┤
  │ 1496051219 │  16384 │ 16385 │ select count(*) from foo;                     │ real-time     │ NULL          │     1 │
  │ 2530480378 │  16384 │ 16385 │ select * from foo where id = $1               │ router        │ 42            │     1 │
  │ 3233520930 │  16384 │ 16385 │ insert into foo select generate_series($1,$2) │ insert-select │ NULL          │     1 │
  └────────────┴────────┴───────┴───────────────────────────────────────────────┴───────────────┴───────────────┴───────┘

注意事项:

* 统计数据不会被复制，并且不会在数据库崩溃或故障转移后继续存在
* 它是协调者节点功能，没有:ref:`Citus MX <mx>`支持
* 跟踪由``pg_stat_statements.max`` GUC 设置的有限数量的查询（默认5000）
* 要截断表，请使用该``citus_stat_statements_reset()``函数

分布式查询活动
~~~~~~~~~~~~~~~~~~~~~~~~~~

使用Citus MX，用户可以从任何节点执行分布式查询。检查协调者上的标准Postgres `pg_stat_activity <https://www.postgresql.org/docs/current/static/monitoring-stats.html#PG-STAT-ACTIVITY-VIEW>`_视图将不包括那些工作者发起的查询。此外，查询可能会在工作节点上的某个分片上的行级锁上被阻塞。如果发生这种情况，那么这些查询将不会显示在Citus协调器者节点上的`pg_locks <https://www.postgresql.org/docs/current/static/view-pg-locks.html>`_中。

Citus提供了特殊的视图来监视整个集群中的查询和锁，包括内部使用的特定于分区的查询来构建分布式查询的结果。

* **citus_dist_stat_activity**: 显示在所有节点上执行的分布式查询。一个超集``pg_stat_activity``，可以在后者的任何地方使用。
* **citus_worker_stat_activity**: 显示工作者上的查询，包括针对各个分片的片段查询。
* **citus_lock_waits**: 整个群集中的阻塞的查询。

前两个视图包括`pg_stat_activity <https://www.postgresql.org/docs/current/static/monitoring-stats.html#PG-STAT-ACTIVITY-VIEW>`_的所有列以及发起查询的工作者的主机主机/端口以及集群的协调器节点的主机/端口。

例如，考虑计算分布式表中的行：

.. code-block:: postgres

   -- run from worker on localhost:9701

   SELECT count(*) FROM users_table;

我们可以看到查询显示在``citus_dist_stat_activity``：

.. code-block:: postgres

   SELECT * FROM citus_dist_stat_activity;

   -[ RECORD 1 ]----------+----------------------------------
   query_hostname         | localhost
   query_hostport         | 9701
   master_query_host_name | localhost
   master_query_host_port | 9701
   transaction_number     | 1
   transaction_stamp      | 2018-10-05 13:27:20.691907+03
   datid                  | 12630
   datname                | postgres
   pid                    | 23723
   usesysid               | 10
   usename                | citus
   application_name       | psql
   client_addr            | 
   client_hostname        | 
   client_port            | -1
   backend_start          | 2018-10-05 13:27:14.419905+03
   xact_start             | 2018-10-05 13:27:16.362887+03
   query_start            | 2018-10-05 13:27:20.682452+03
   state_change           | 2018-10-05 13:27:20.896546+03
   wait_event_type        | Client
   wait_event             | ClientRead
   state                  | idle in transaction
   backend_xid            | 
   backend_xmin           | 
   query                  | SELECT count(*) FROM users_table;
   backend_type           | client backend

此查询需要来自所有分片的信息。一些信息在分片users_table_102038中，恰好存储在localhost:9700中。
我们可以看到一个查询访问分片, 通过查看``citus_worker_stat_activity``视图:

.. code-block:: postgres

   SELECT * FROM citus_worker_stat_activity;

   -[ RECORD 1 ]----------+-----------------------------------------------------------------------------------------
   query_hostname         | localhost
   query_hostport         | 9700
   master_query_host_name | localhost
   master_query_host_port | 9701
   transaction_number     | 1
   transaction_stamp      | 2018-10-05 13:27:20.691907+03
   datid                  | 12630
   datname                | postgres
   pid                    | 23781
   usesysid               | 10
   usename                | citus
   application_name       | citus
   client_addr            | ::1
   client_hostname        | 
   client_port            | 51773
   backend_start          | 2018-10-05 13:27:20.75839+03
   xact_start             | 2018-10-05 13:27:20.84112+03
   query_start            | 2018-10-05 13:27:20.867446+03
   state_change           | 2018-10-05 13:27:20.869889+03
   wait_event_type        | Client
   wait_event             | ClientRead
   state                  | idle in transaction
   backend_xid            | 
   backend_xmin           | 
   query                  | COPY (SELECT count(*) AS count FROM users_table_102038 users_table WHERE true) TO STDOUT
   backend_type           | client backend

该``query``字段显示从要计数的分片中复制的数据。

.. 注意::

  如果在没有事务块的情况下执行路由器查询(例如，多租户应用程序中的单租户, ``SELECT * FROM table WHERE tenant_id = X``)，则 citus_worker_stat_activity 中的 master_query_host_name 和 master_query_host_port 列将为NULL。

要了解其``citus_lock_waits``工作原理，我们可以手动生成锁定情况。首先，我们将从协调员建立一个测试表：

.. code-block:: postgres

   CREATE TABLE numbers AS
     SELECT i, 0 AS j FROM generate_series(1,10) AS i;
   SELECT create_distributed_table('numbers', 'i');

然后，在协调者上使用两个会话，我们可以运行以下语句序列：

.. code-block:: postgres

   -- session 1                           -- session 2
   -------------------------------------  -------------------------------------
   BEGIN;
   UPDATE numbers SET j = 2 WHERE i = 1;
                                          BEGIN;
                                          UPDATE numbers SET j = 3 WHERE i = 1;
                                          -- (this blocks)

该``citus_lock_waits``视图显示了这种情况。

.. code-block:: postgres

   SELECT * FROM citus_lock_waits;

   -[ RECORD 1 ]-------------------------+----------------------------------------
   waiting_pid                           | 88624
   blocking_pid                          | 88615
   blocked_statement                     | UPDATE numbers SET j = 3 WHERE i = 1;
   current_statement_in_blocking_process | UPDATE numbers SET j = 2 WHERE i = 1;
   waiting_node_id                       | 0
   blocking_node_id                      | 0
   waiting_node_name                     | coordinator_host
   blocking_node_name                    | coordinator_host
   waiting_node_port                     | 5432
   blocking_node_port                    | 5432

在此示例中，查询源自协调者，但视图还可以列出源自工作者的查询之间的锁定(例如，使用Citus MX执行)。

所有节点上的表
-------------------

Citus还有其他信息表和视图，可以在所有节点上访问，而不仅仅是协调者。

.. _pg_dist_authinfo:

连接凭证表
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. 注意::

  此表是是Citus企业版的一部分。请`联系我们 <https://www.citusdata.com/about/contact_us>`_以获取此功能。

该``pg_dist_authinfo``表包含Citus节点用于彼此连接的身份验证参数。

+----------+---------+-------------------------------------------------+
| Name     | Type    | Description                                     |
+==========+=========+=================================================+
| nodeid   | integer | 节点id, 来自 :ref:`pg_dist_node`, or 0, or -1   |
+----------+---------+-------------------------------------------------+
| rolename | name    | Postgres 角色                                   |
+----------+---------+-------------------------------------------------+
| authinfo | text    | 以空格分隔的libpq连接参数                       |
+----------+---------+-------------------------------------------------+

在开始连接时，节点查询该表以查看是否存在具有目的``nodeid``和期望``rolename``的行。
如果是，则节点包含相应``authinfo``字符串在其libpq连接中。
一个常见的例子是存储密码，比如``'password=abc123'``, 但是您可以查看可能用到的`完整列表 <https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-PARAMKEYWORDS>`_。

``authinfo``中的参数以空格分隔, key=val格式。要写入空值或包含空格的值，请用单引号括起来，例如``keyword='a value'``。值中的单引号和反斜杠必须用反斜杠转义, 例如``\'`` 和 ``\\``。

该 ``nodeid`` 列还可以采用特殊值0和-1，分别表示*所有节点*或*环回连接*。如果, 对于给定节点，同时存在特定和所有节点规则，则特定规则具有优先权。

::

    SELECT * FROM pg_dist_authinfo;

     nodeid | rolename | authinfo
    --------+----------+-----------------
        123 | jdoe     | password=abc123
    (1 row)

连接池凭据
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. 注意::

  此表是Citus企业版的一部分。请`联系我们 <https://www.citusdata.com/about/contact_us>`_以获取此功能。

如果要使用连接池连接到一个节点，可以使用``pg_dist_poolinfo``时指定pooler选项。此元数据表包含Citus在通过连接池连接到一个节点时要使用的主机，端口和数据库名称。

如果存在池信息，Citus将尝试使用这些值而不是设置直接连接。pg_dist_poolinfo信息在这种情况下取代:ref:`pg_dist_node <pg_dist_node>`。

+----------+---------+---------------------------------------------------+
| Name     | Type    | Description                                       |
+==========+=========+===================================================+
| nodeid   | integer | 节点id, 来自 :ref:`pg_dist_node`                  |
+----------+---------+---------------------------------------------------+
| poolinfo | text    | 空格分隔的参数: host, port, 或 dbname             |
+----------+---------+---------------------------------------------------+

.. 注意::

   在某些情况下，Citus会忽略pg_dist_poolinfo中的设置。例如，:ref:`分片再平衡 <shard_rebalancing>`与诸如pgbouncer之类的连接池的连接不兼容。在这些情况下，Citus将使用直接连接。

.. code-block:: sql

   -- how to connect to node 1 (as identified in pg_dist_node)

   INSERT INTO pg_dist_poolinfo (nodeid, poolinfo)
        VALUES (1, 'host=127.0.0.1 port=5433');

.. _worker_shards:

MX工作者上的分片和索引
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. 注意::

   citus_shards_on_worker和citus_shard_indexes_on_worker视图仅与Citus MX相关。在非MX方案中，它们不包含任何行。

工作节点将分片存储为通常隐藏在Citus MX中的表(请参阅:ref:`override_table_visibility`)。获取每个工作者上的分片信息的最简单方法是查询该工作者的``citus_shards_on_worker``视图。例如，以下是分布式表``test_table``在一个工作者上的一些分片：

.. code-block:: postgres

   SELECT * FROM citus_shards_on_worker ORDER BY 2;
    Schema |        Name        | Type  | Owner
   --------+--------------------+-------+-------
    public | test_table_1130000 | table | citus
    public | test_table_1130002 | table | citus

分片的索引也是隐藏的，但可以通过另一个视图发现, ``citus_shard_indexes_on_worker`：

.. code-block:: postgres

   SELECT * FROM citus_shard_indexes_on_worker ORDER BY 2;
    Schema |        Name        | Type  | Owner |       Table
   --------+--------------------+-------+-------+--------------------
    public | test_index_1130000 | index | citus | test_table_1130000
    public | test_index_1130002 | index | citus | test_table_1130002

